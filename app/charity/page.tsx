'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'

interface CharityItem {
  id: string
  item_name: string
  item_value: number
  status: string
  claim_method: string | null
  requires_delivery: boolean
  delivery_funded: boolean
  expires_at: string
  business_name: string
  region: string
  is_expired: boolean
  created_at: string
}

interface CharityStats {
  total_available: number
  total_value: number
  participating_businesses: number
}

export default function CharityPoolPage() {
  const [charityItems, setCharityItems] = useState<CharityItem[]>([])
  const [stats, setStats] = useState<CharityStats | null>(null)
  const [loading, setLoading] = useState(true)
  const [selectedRegion, setSelectedRegion] = useState<string>('all')
  const [claimingId, setClaimingId] = useState<string | null>(null)

  useEffect(() => {
    fetchCharityPool()
  }, [selectedRegion])

  const fetchCharityPool = async () => {
    setLoading(true)
    const params = new URLSearchParams()
    if (selectedRegion !== 'all') params.append('region', selectedRegion)

    const response = await fetch(`/api/charity/pool?${params}`)
    const data = await response.json()
    setCharityItems(data.charityItems || [])
    setStats(data.stats || null)
    setLoading(false)
  }

  const handleClaim = async (itemId: string, method: 'lottery' | 'quick_game') => {
    setClaimingId(itemId)

    try {
      const response = await fetch('/api/charity/claim', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          charityItemId: itemId,
          claimMethod: method,
          claimData: method === 'quick_game' ? { score: Math.random() * 100 } : {},
        }),
      })

      const data = await response.json()

      if (data.success) {
        if (data.claim.successful) {
          alert(`üéâ Congratulations!\n\nYou won: ${data.claim.itemName}\n\nRedemption Code: ${data.claim.redemptionCode}\nPoints Earned: ${data.claim.pointsEarned}`)
          fetchCharityPool() // Refresh
        } else {
          alert(`Better luck next time!\n\nYou earned ${data.claim.pointsEarned} points for participating.`)
        }
      } else {
        alert('Claim failed: ' + data.message)
      }
    } catch (error) {
      alert('Claim failed')
    } finally {
      setClaimingId(null)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-900 via-green-900/20 to-gray-900 text-white">
      <div className="container mx-auto px-4 py-12">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-12"
        >
          <h1 className="text-5xl font-bold mb-4 bg-gradient-to-r from-[#10B981] via-[#8B5CF6] to-[#F7931A] text-transparent bg-clip-text">
            Charity Pool
          </h1>
          <p className="text-xl text-gray-300">
            Free items generated by community purchases
          </p>
          <p className="text-sm text-gray-400 mt-2">
            Claim items through lottery or games, or nominate someone in need
          </p>
        </motion.div>

        {/* Stats */}
        {stats && (
          <div className="grid md:grid-cols-3 gap-6 mb-8">
            <div className="bg-gray-800/50 border border-gray-700 rounded-lg p-6">
              <div className="text-4xl mb-2">üéÅ</div>
              <div className="text-3xl font-bold text-green-400">{stats.total_available}</div>
              <div className="text-sm text-gray-400">Available Items</div>
            </div>
            <div className="bg-gray-800/50 border border-gray-700 rounded-lg p-6">
              <div className="text-4xl mb-2">üíé</div>
              <div className="text-3xl font-bold text-purple-400">${stats.total_value?.toFixed(2) || '0.00'}</div>
              <div className="text-sm text-gray-400">Total Value</div>
            </div>
            <div className="bg-gray-800/50 border border-gray-700 rounded-lg p-6">
              <div className="text-4xl mb-2">üè™</div>
              <div className="text-3xl font-bold text-orange-400">{stats.participating_businesses}</div>
              <div className="text-sm text-gray-400">Businesses Giving</div>
            </div>
          </div>
        )}

        {/* Filter */}
        <div className="mb-8">
          <label className="block text-sm mb-2">Filter by Region</label>
          <select
            value={selectedRegion}
            onChange={(e) => setSelectedRegion(e.target.value)}
            className="bg-gray-800 border border-gray-700 rounded px-4 py-2"
          >
            <option value="all">All Regions</option>
            <option value="DC">Washington, DC</option>
            <option value="MD">Maryland</option>
            <option value="VA">Virginia</option>
          </select>
        </div>

        {/* Charity Items */}
        {loading ? (
          <div className="text-center py-12">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-500 mx-auto"></div>
            <p className="mt-4 text-gray-400">Loading charity pool...</p>
          </div>
        ) : charityItems.length === 0 ? (
          <div className="text-center py-12 bg-gray-800/50 rounded-lg">
            <p className="text-gray-400">No charity items available yet</p>
            <p className="text-sm text-gray-500 mt-2">Keep supporting the marketplace to generate more!</p>
          </div>
        ) : (
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {charityItems.map((item) => (
              <motion.div
                key={item.id}
                initial={{ opacity: 0, scale: 0.95 }}
                animate={{ opacity: 1, scale: 1 }}
                className="bg-gray-800/50 border border-gray-700 rounded-lg overflow-hidden hover:border-green-500 transition-all"
              >
                <div className="p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h3 className="text-xl font-bold mb-1">{item.item_name}</h3>
                      <p className="text-sm text-gray-400">{item.business_name}</p>
                      <p className="text-xs text-gray-500">{item.region}</p>
                    </div>
                    <span className="bg-green-500 text-white px-3 py-1 rounded-full text-sm font-bold">
                      FREE
                    </span>
                  </div>

                  <div className="mb-4">
                    <p className="text-2xl font-bold text-green-400">${item.item_value?.toFixed(2)}</p>
                    <p className="text-xs text-gray-400">Value</p>
                  </div>

                  {/* Expiration */}
                  <div className="mb-4 text-sm">
                    <p className="text-gray-400">
                      Expires: {new Date(item.expires_at).toLocaleDateString()}
                    </p>
                    <p className="text-gray-500 text-xs">
                      {Math.ceil((new Date(item.expires_at).getTime() - Date.now()) / (1000 * 60 * 60 * 24))} days remaining
                    </p>
                  </div>

                  {/* Delivery Info */}
                  {item.requires_delivery && (
                    <div className="mb-4 p-3 bg-purple-900/30 border border-purple-700 rounded">
                      <p className="text-xs font-semibold mb-1">üöö Requires Delivery</p>
                      <p className="text-xs text-gray-400">
                        {item.delivery_funded ? 'Delivery funded!' : 'Crowdfund delivery to claim'}
                      </p>
                    </div>
                  )}

                  {/* Claim Buttons */}
                  <div className="space-y-2">
                    <button
                      onClick={() => handleClaim(item.id, 'lottery')}
                      disabled={claimingId === item.id}
                      className="w-full bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 disabled:from-gray-600 disabled:to-gray-700 text-white font-bold py-2 rounded-lg transition-all"
                    >
                      {claimingId === item.id ? 'Claiming...' : 'üé≤ Try Lottery (10% chance)'}
                    </button>
                    <button
                      onClick={() => handleClaim(item.id, 'quick_game')}
                      disabled={claimingId === item.id}
                      className="w-full bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 disabled:from-gray-600 disabled:to-gray-700 text-white font-bold py-2 rounded-lg transition-all"
                    >
                      {claimingId === item.id ? 'Claiming...' : 'üéÆ Play Game'}
                    </button>
                  </div>

                  <p className="text-xs text-gray-400 text-center mt-3">
                    Earn points for participating ‚Ä¢ Help the community
                  </p>
                </div>
              </motion.div>
            ))}
          </div>
        )}

        {/* How It Works */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.3 }}
          className="mt-12 bg-gray-800/30 border border-gray-700 rounded-lg p-6"
        >
          <h2 className="text-2xl font-bold mb-4">How to Claim</h2>
          <div className="grid md:grid-cols-3 gap-6">
            <div>
              <div className="text-4xl mb-2">üé≤</div>
              <h3 className="font-bold mb-2">Lottery System</h3>
              <p className="text-sm text-gray-300">
                Try your luck with a random lottery. 10% chance to win. Everyone earns points for participating.
              </p>
            </div>
            <div>
              <div className="text-4xl mb-2">üéÆ</div>
              <h3 className="font-bold mb-2">Quick Games</h3>
              <p className="text-sm text-gray-300">
                Play quick skill-based games. Higher scores = better chances. More points for winners.
              </p>
            </div>
            <div>
              <div className="text-4xl mb-2">üó≥Ô∏è</div>
              <h3 className="font-bold mb-2">Community Vote</h3>
              <p className="text-sm text-gray-300">
                Nominate someone in need. Community votes. Winner receives the item directly.
              </p>
            </div>
          </div>
        </motion.div>
      </div>
    </div>
  )
}
